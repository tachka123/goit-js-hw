{"version":3,"sources":["webpack:///./js/fetchWeather.js","webpack:///./js/showWeather.js","webpack:///./js/getGeoPosition.js","webpack:///./js/weatherByCity.js","webpack:///./index.js"],"names":["getWeatherByCords","long","lat","fetch","options","searchForm","getWeather","inputWeather","weather","console","log","location","document","querySelector","temperature","Humidity","Wind","Conditions","textContent","currently","humidity","Math","round","windSpeed","summary","timezone","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","result","fetchWeather","coords","latitude","longitude","json","showWeather","catch","PNotify","error","getElementById","addEventListener","e","preventDefault","cityName","value","loading","style","display","lon"],"mappings":"iKAAe,SAASA,EAAkBC,EAAMC,GAC9C,OAAOC,MAAM,yGAC8FF,EAD/F,IACuGC,GCDtG,ICAPE,ECIAC,EACAC,EACAC,EFNO,WAASC,GACtBC,QAAQC,IAAIF,GACZ,IAAMG,EAAWC,SAASC,cAAc,2BAClCC,EAAcF,SAASC,cAAc,uBACrCE,EAAWH,SAASC,cAAc,2BAClCG,EAAOJ,SAASC,cAAc,uBAC9BI,EAAaL,SAASC,cAAc,6BAC1CE,EAASG,YAAcV,EAAQW,UAAUC,SACzCN,EAAYI,YAAcG,KAAKC,MACW,GAAtCd,EAAQW,UAAUL,YAAc,IAAW,GAE/CE,EAAKE,YAAcG,KAAKC,MAAoC,SAA9Bd,EAAQW,UAAUI,WAChDN,EAAWC,YAAcV,EAAQW,UAAUK,QAC3Cb,EAASO,YAAcV,EAAQiB,U,aCbzBrB,EAAU,CACdsB,WAAY,KAEP,IAAIC,SAAQ,SAACC,EAASC,GAC3B,OAAOC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQzB,OEMhD6B,MAMrB,SAAyBC,GACvBC,EAAaD,EAAOE,OAAOC,SAASH,EAAOE,OAAOE,WAAWL,MAAK,SAAAC,GAAM,OAAIA,EAAOK,UAAQN,MAAK,SAAAC,GAAM,OAAIM,EAAYN,SAP7EO,OAE3C,WACEC,IAAQC,MAAM,uDDTRtC,EAAaO,SAASgC,eAAe,eACrCtC,EAAaD,EAAWQ,cAAc,UACtCN,EAAeF,EAAWQ,cAAc,SAC9CP,EAAWuC,iBAAiB,SAAS,SAAAC,GACnCA,EAAEC,iBACF,IAAMC,EAAWzC,EAAa0C,MACxBC,EAAUtC,SAASC,cAAc,YACvCqC,EAAQC,MAAMC,QAAU,OACLjD,MAAM,iEAC0C6C,EAD3C,gBAGrBf,MAAK,SAAAC,GAAM,OAAIA,EAAOK,UACtBN,MAAK,SAAAC,GAAM,OAAIA,EAAO,MAEtBD,MAAK,SAAAC,GAAM,OAAIC,EAAaD,EAAOhC,IAAKgC,EAAOmB,QAC/CpB,MAAK,SAAAC,GAAM,OAAIA,EAAOK,UACtBN,MAAK,SAAAC,GACJM,EAAYN,GACZgB,EAAQC,MAAMC,QAAU,UAEzBX,OAAM,SAAAE,GACLO,EAAQC,MAAMC,QAAU,OACxBV,IAAQC,MAAM,sD","file":"main.73f3cc25979f7a8315d7.js","sourcesContent":["export default function getWeatherByCords(long, lat) {\n  return fetch(\n    `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/b715457808493e49927c694168fcb19d/${long},${lat}`,\n  );\n}\n","\nexport default function(weather) {\n  console.log(weather);\n  const location = document.querySelector('[data-field=\"location\"]');\n  const temperature = document.querySelector('[data-field=\"temp\"]');\n  const Humidity = document.querySelector('[data-field=\"humidity\"]');\n  const Wind = document.querySelector('[data-field=\"wind\"]');\n  const Conditions = document.querySelector('[data-field=\"conditions\"]');\n  Humidity.textContent = weather.currently.humidity;\n  temperature.textContent = Math.round(\n    ((weather.currently.temperature - 32) * 5) / 9,\n  );\n  Wind.textContent = Math.round(weather.currently.windSpeed * 1.609344);\n  Conditions.textContent = weather.currently.summary;\n  location.textContent = weather.timezone\n}\n","export default function GetCurrentLocation() {\n  const options = {\n    maximumAge: 60000\n  }\n  return new Promise((resolve, reject) => {\n    return navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n}\n","import fetchWeather from './fetchWeather';\nimport showWeather from './showWeather';\nimport PNotify from 'pnotify/dist/es/PNotify';\n\nexport default function() {\n  const searchForm = document.getElementById('search-form');\n  const getWeather = searchForm.querySelector('button');\n  const inputWeather = searchForm.querySelector('input');\n  getWeather.addEventListener('click', e => {\n    e.preventDefault();\n    const cityName = inputWeather.value;\n    const loading = document.querySelector('.loading');\n    loading.style.display = 'flex';\n    const cityTarget = fetch(\n      `https://eu1.locationiq.com/v1/search.php?key=9c8bd24f982849&q=${cityName}&format=json`,\n    )\n      .then(result => result.json())\n      .then(result => result[0]);\n    cityTarget\n      .then(result => fetchWeather(result.lat, result.lon))\n      .then(result => result.json())\n      .then(result => {\n        showWeather(result);\n        loading.style.display = 'none';\n      })\n      .catch(error => {\n        loading.style.display = 'none';\n        PNotify.error('Can`t find inputed city! Please, try again');\n      });\n  });\n}\n","import './styles.css';\nimport '../node_modules/pnotify/dist/PNotifyBrightTheme.css'\nimport getCurrentLocation from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather'\nimport showWeather from './js/showWeather'\nimport weatherByCity from './js/weatherByCity'\nimport PNotify from 'pnotify/dist/es/PNotify';\n\n\n\n\ngetCurrentLocation().then(onGetPosSuccess).catch(onGetPosError)\n\nfunction onGetPosError () {\n  PNotify.error('No location permissions, use search by city name');\n}\n\nfunction onGetPosSuccess(result){\n  fetchWeather(result.coords.latitude,result.coords.longitude).then(result => result.json()).then(result => showWeather(result))\n}\n\nweatherByCity()\n"],"sourceRoot":""}