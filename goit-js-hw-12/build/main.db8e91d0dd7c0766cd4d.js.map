{"version":3,"sources":["webpack:///./js/fetchWeather.js","webpack:///./js/showWeather.js","webpack:///./js/getGeoPosition.js","webpack:///./js/weatherByCity.js","webpack:///./index.js"],"names":["getWeatherByCords","long","lat","fetch","weather","city","latitude","longitude","then","result","json","display_name","split","location","document","querySelector","temperature","Humidity","Wind","Conditions","textContent","currently","humidity","Math","round","windSpeed","summary","options","cityNameFromApi","searchForm","getWeather","inputWeather","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","loading","style","display","fetchWeather","coords","showWeather","catch","PNotify","error","getElementById","addEventListener","e","preventDefault","cityName","value","lon"],"mappings":"iKAAe,SAASA,EAAkBC,EAAMC,GAC9C,OAAOC,MAAM,yGAC8FF,EAD/F,IACuGC,G,uJCFtG,oBAAf,gC,qDAAe,WAAeE,EAASC,GAAxB,iGACRA,EADQ,gCAELF,MAAM,oEAC0DC,EAAQE,SADnE,QACmFF,EAAQG,UAD3F,gBAGRC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAAM,OAAKJ,EAAOI,EAAOE,aAAaC,MAAM,KAAK,MAN9C,OAQPC,EAAWC,SAASC,cAAc,2BAClCC,EAAcF,SAASC,cAAc,uBACrCE,EAAWH,SAASC,cAAc,2BAClCG,EAAOJ,SAASC,cAAc,uBAC9BI,EAAaL,SAASC,cAAc,6BAC1CE,EAASG,YAAchB,EAAQiB,UAAUC,SACzCN,EAAYI,YAAcG,KAAKC,MACW,GAAtCpB,EAAQiB,UAAUL,YAAc,IAAW,GAE/CE,EAAKE,YAAcG,KAAKC,MAAoC,SAA9BpB,EAAQiB,UAAUI,WAChDN,EAAWC,YAAchB,EAAQiB,UAAUK,QAC3Cb,EAASO,YAAcf,EAnBV,4C,2MCCPsB,ECOFC,EAHEC,EACAC,EACAC,E,aDNAJ,EAAU,CACdK,WAAY,KAEP,IAAIC,SAAQ,SAACC,EAASC,GAC3B,OAAOC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQR,OEIlEnB,MAOH,SAAyBC,GACvB,IAAM8B,EAAUzB,SAASC,cAAc,YACvCwB,EAAQC,MAAMC,QAAU,OACxBC,EAAajC,EAAOkC,OAAOrC,SAAUG,EAAOkC,OAAOpC,WAChDC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACJ8B,EAAQC,MAAMC,QAAU,OACxBG,EAAYnC,SAbfoC,OAEH,WACEC,IAAQC,MAAM,uDDRRlB,EAAaf,SAASkC,eAAe,eACrClB,EAAaD,EAAWd,cAAc,UACtCgB,EAAeF,EAAWd,cAAc,SAE9Ce,EAAWmB,iBAAiB,SAAS,SAAAC,GACnCA,EAAEC,iBACF,IAAMC,EAAWrB,EAAasB,MACxBd,EAAUzB,SAASC,cAAc,YACvCwB,EAAQC,MAAMC,QAAU,OACLtC,MAAM,iEAC0CiD,EAD3C,gBAGrB5C,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GAEJ,OADAmB,EAAkBnB,EAAO,GAAGE,aAAaC,MAAM,KAAK,GAC7CH,EAAO,MAGfD,MAAK,SAAAC,GAAM,OAAIiC,EAAajC,EAAOP,IAAKO,EAAO6C,QAC/C9C,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACJmC,EAAYnC,EAAQmB,GACpBW,EAAQC,MAAMC,QAAU,UAEzBI,OAAM,SAAAE,GACLR,EAAQC,MAAMC,QAAU,OACxBK,IAAQC,MAAM,sD","file":"main.db8e91d0dd7c0766cd4d.js","sourcesContent":["export default function getWeatherByCords(long, lat) {\n  return fetch(\n    `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/b715457808493e49927c694168fcb19d/${long},${lat}`,\n  );\n}\n","export default async function(weather, city) {\n  if (!city) {\n    await fetch(\n      `https://us1.locationiq.com/v1/reverse.php?key=9c8bd24f982849&lat=${weather.latitude}&lon=${weather.longitude}&format=json`,\n    )\n      .then(result => result.json())\n      .then(result => (city = result.display_name.split(',')[3]));\n  }\n  const location = document.querySelector('[data-field=\"location\"]');\n  const temperature = document.querySelector('[data-field=\"temp\"]');\n  const Humidity = document.querySelector('[data-field=\"humidity\"]');\n  const Wind = document.querySelector('[data-field=\"wind\"]');\n  const Conditions = document.querySelector('[data-field=\"conditions\"]');\n  Humidity.textContent = weather.currently.humidity;\n  temperature.textContent = Math.round(\n    ((weather.currently.temperature - 32) * 5) / 9,\n  );\n  Wind.textContent = Math.round(weather.currently.windSpeed * 1.609344);\n  Conditions.textContent = weather.currently.summary;\n  location.textContent = city;\n}\n","export default function GetCurrentLocation() {\n  const options = {\n    maximumAge: 60000,\n  };\n  return new Promise((resolve, reject) => {\n    return navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n}\n","import fetchWeather from './fetchWeather';\nimport showWeather from './showWeather';\nimport PNotify from 'pnotify/dist/es/PNotify';\n\nexport default function() {\n  const searchForm = document.getElementById('search-form');\n  const getWeather = searchForm.querySelector('button');\n  const inputWeather = searchForm.querySelector('input');\n  let cityNameFromApi;\n  getWeather.addEventListener('click', e => {\n    e.preventDefault();\n    const cityName = inputWeather.value;\n    const loading = document.querySelector('.loading');\n    loading.style.display = 'flex';\n    const cityTarget = fetch(\n      `https://eu1.locationiq.com/v1/search.php?key=9c8bd24f982849&q=${cityName}&format=json`,\n    )\n      .then(result => result.json())\n      .then(result =>  {\n        cityNameFromApi = result[0].display_name.split(',')[0];\n        return result[0]\n      })\n    cityTarget\n      .then(result => fetchWeather(result.lat, result.lon))\n      .then(result => result.json())\n      .then(result => {\n        showWeather(result, cityNameFromApi);\n        loading.style.display = 'none';\n      })\n      .catch(error => {\n        loading.style.display = 'none';\n        PNotify.error('Can`t find inputed city! Please, try again');\n      });\n  });\n}\n","import './styles.css';\nimport '../node_modules/pnotify/dist/PNotifyBrightTheme.css';\nimport getCurrentLocation from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\nimport showWeather from './js/showWeather';\nimport weatherByCity from './js/weatherByCity';\nimport PNotify from 'pnotify/dist/es/PNotify';\n\ngetCurrentLocation()\n  .then(onGetPosSuccess)\n  .catch(onGetPosError);\n\nfunction onGetPosError() {\n  PNotify.error('No location permissions, use search by city name');\n}\n\nfunction onGetPosSuccess(result) {\n  const loading = document.querySelector('.loading');\n  loading.style.display = 'flex';\n  fetchWeather(result.coords.latitude, result.coords.longitude)\n    .then(result => result.json())\n    .then(result => {\n      loading.style.display = 'none';\n      showWeather(result);\n    });\n}\n\nweatherByCity();\n"],"sourceRoot":""}